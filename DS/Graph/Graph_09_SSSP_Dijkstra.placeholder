import java.util.LinkedList;
import java.util.PriorityQueue;

class Graph_09_SSSP_DijkstraAdjMatrix {
    static class Graph {
        int numVertices;
        int[][] adjMatrix;

        Graph(int numVertices, int[][] adjMatrix) {
            this.numVertices = numVertices;
            this.adjMatrix = adjMatrix;
        }

        private int findMinIndex(boolean [] isVisited) {
            for (int i = 0; i < numVertices; i++) {
                int minIndex = 0;
                if (!isVisited[i]) {
                    
                }
            }
            return 0;
        }

        void dijkstra(int source) {
            int [] distances = new int [numVertices];
            boolean [] isVisited = new boolean [numVertices];
            int [] parent = new int [numVertices];

            for (int i = 0; i < numVertices; i++) {
                distances[i] = Integer.MAX_VALUE;
                isVisited[i] = false;
                parent[i] = 0;
            }

            distances[source] = 0;

            for (int i = 0; i < numVertices; i++) {
                
            }
        }
    }

    public static void main(String[] args) {
        int adjMatrix[][] = new int[][] { { 0, 4, 0, 0, 0, 0, 0, 8, 0 }, { 4, 0, 8, 0, 0, 0, 0, 11, 0 },
                { 0, 8, 0, 7, 0, 4, 0, 0, 2 }, { 0, 0, 7, 0, 9, 14, 0, 0, 0 }, { 0, 0, 0, 9, 0, 10, 0, 0, 0 },
                { 0, 0, 4, 14, 10, 0, 2, 0, 0 }, { 0, 0, 0, 0, 0, 2, 0, 1, 6 }, { 8, 11, 0, 0, 0, 0, 1, 0, 7 },
                { 0, 0, 2, 0, 0, 0, 6, 7, 0 } };

        Graph g = new Graph(9, adjMatrix);
        g.dijkstra(0);
    }
}